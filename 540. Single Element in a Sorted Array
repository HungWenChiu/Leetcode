// sol 1 => O(n)
// class Solution {
// public:
//     int singleNonDuplicate(vector<int>& nums) {
        
//         int res = 0;
        
//         for(int i = 0; i < nums.size(); i++)
//             res ^= nums[i];
        
//         return res;
        
//     }
// };

// O(logN)
// 要怎麼判斷是左邊還是右邊？？
// 使用nums[mid] == nums[mid + 1] 如果一樣再去判斷右邊的剩下數目是奇數還是偶數
// 1  1  2  2  3
// 1  2  2  3  3
// class Solution {
// public:
//     int singleNonDuplicate(vector<int>& nums) {
        
//         int left = 0, right = nums.size() - 1, n = nums.size();
        
//         while(left < right)
//         {
//             int mid = left + (right - left) / 2;
            
//             if(nums[mid] == nums[mid + 1])
//             {
//                 if((n - 1 - mid) % 2 == 1) right = mid - 1;
//                 else left = mid + 1;
//             }
//             else
//             {
//                 if(mid == 0 || nums[mid] != nums[mid - 1]) return nums[mid];
//                 if((n - 1 - mid) % 2 == 0) right = mid - 1;
//                 else left = mid + 1;
//             }
//         }
        
//         return nums[left];
//     }
// };

// O(logN)
// 更屌的寫法，每次search找到的數字都跟1做XOR，這樣可以配對，
// 0 ^ 1 = 1, 1 ^ 1 = 0 ==> 表示0跟1是一對
// 2 ^ 1 = 3, 3 ^ 1 = 2 ==> 表示2跟3是一對
// 由此來判斷要選左邊還是右邊
// 1  1  2  2  3
// 1  2  2  3  3
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        
        int left = 0, right = nums.size() - 1;
        
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if(nums[mid] == nums[mid ^ 1]) left = mid + 1; // 表示前面是配對的
            else right = mid; // 表示前面不是配對的，往前找，記住不可以right = mid - 1，因為mid也有可能是result
        }
        return nums[left];
    }
};
