// 其中一解法: dynamic program
// dp[0] = 0
// dp[1] = 1*1 = 1
// dp[2] = dp[2-1*1] + 2 = 原本檢調1*1的dp方法數 + 1*1這個數字
// dp[3] = dp[3 - 1*1] + 1 = dp[2] + 1 = 3
// dp[4] = min{dp[4 - 1*1] + 1, dp[4 - 2*2] + 1} = min{dp[3] + 1,dp[0] + 1} = 1
// dp[5] = min{dp[5 - 1*1] + 1, dp[5 - 2*2] + 1} = min{dp[4]+1, dp[1] + 1} = 2
// ......
// dp[n] = min{dp[n - 1*1] + 1, dp[n - 2*2] + 1, ......dp[n - j*j] + 1}, n-j*j >= 0

class Solution {
public:
    int numSquares(int n) {
        
        vector<int> dp(n + 1,0);
        
        for(int i = 1; i <= n; i++)
        {
            int dp_min = INT_MAX;
            int j = 1;
            while(i - j*j >= 0)
            {
                dp_min = min(dp_min, dp[i - j*j] + 1);
                j++;
            }
            
            dp[i] = dp_min;
        }
        
        return dp.back();
        
    }
};
