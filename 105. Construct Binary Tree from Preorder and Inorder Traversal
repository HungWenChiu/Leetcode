/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        TreeNode* tree = buildTree(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
        
        return tree;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder, int pleft, int pright, int ileft, int iright){
        
        if(pleft > pright || ileft > iright)
            return nullptr;
        
        int bound;
        for(int i = ileft; i <= iright; i++)
        {
            if(preorder[pleft] == inorder[i])
            {
                bound = i;
                break;
            }
        }    
        
        TreeNode* node = new TreeNode(preorder[pleft]);
        node->left = buildTree(preorder, inorder, pleft + 1, pleft + bound - ileft, ileft, bound - 1);
        node->right = buildTree(preorder, inorder, pleft + bound - ileft + 1, pright, bound + 1, iright);
        
        return node;
        
    }
};
