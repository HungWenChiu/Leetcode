/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//recursion
// root-to-leaf path 的意思是只要有children就要繼續往下找，即使只有一個leaf
// class Solution {
// public:
   
//     bool hasPathSum(TreeNode* root, int sum) {
        
//         if(!root) return false;
//         if(!root->left && !root->right && root->val == sum) return true;
//         return hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val);
//     }
// };

//interation
class Solution {
public:
   
    bool hasPathSum(TreeNode* root, int sum) {
        
        if(!root) return false;
        stack<TreeNode*> s{{root}};

        while(!s.empty())
        {
            TreeNode* t = s.top();
            s.pop();
            
            if(!t->left && !t->right && t->val == sum) return true;
            
            if(t->left)
            {
                t->left->val += t->val;
                s.push(t->left);
            }
            
            if(t->right)
                
            {
                t->right->val += t->val;
                s.push(t->right);
            }
        }
        
        return false;
        
    }
};
