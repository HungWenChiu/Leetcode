// O(n ^ 2) priority queue
// class Solution {
// public:
    
//     struct Cmp{
//         bool operator() (pair<int, int>& a, pair<int, int>& b){
//             return a.first + a.second > b.first + b.second;
//         }    
//     };
    
//     vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        
//         if(!nums1.size() || !nums2.size()) return {};
        
//         priority_queue<pair<int, int>, vector<pair<int, int>>, Cmp> pq;
//         vector<vector<int>> res;

//         for(int i = 0; i < nums1.size(); i++)
//             for(int j = 0; j < nums2.size(); j++)
//                 pq.push({nums1[i], nums2[j]});

//         for(int i = 0; i < k && !pq.empty(); i++)
//         {
//             res.push_back({pq.top().first, pq.top().second});
//             pq.pop();
//         }
        
//         return res;
//     }
// };

// O(n ^ 2) multimap
class Solution {
public:
    
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        
        multimap<int, pair<int, int>> mm;
        vector<vector<int>> res;

        for(int i = 0; i < nums1.size(); i++)
            for(int j = 0; j < nums2.size(); j++)
                mm.insert({nums1[i] + nums2[j], {nums1[i], nums2[j]}});

        for(auto e : mm)
        {
            if(k == 0) break;
            vector<int> tmp;
            tmp.push_back(e.second.first);
            tmp.push_back(e.second.second);
            res.push_back(tmp);
            k--;
        }
        
        return res;
    }
};
