/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    
private:
    stack<TreeNode*> s;
public:
    
    BSTIterator(TreeNode* root) {
        
        // initial時一值往左邊下找，放到stack裡面，最上面的表示是最小的數
        while(root)
        {
            this->s.push(root);
            root = root->left;

        }
    }
    
    /** @return the next smallest number */
    int next() {
        
        TreeNode* tmp = this->s.top(); // 把最上面的數字拿出來，準備回傳
        this->s.pop();
        int res = tmp->val;
        
        tmp = tmp->right; // 然後把它右邊子樹的最小值依序input近來
        while(tmp)
        {
            this->s.push(tmp);
            tmp = tmp->left;
        }
        
        return res;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        
        return !this->s.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */


