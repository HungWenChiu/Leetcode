// Dynamic program
// 因為頭尾不可以一起出現，所以必須要從0~size() - 1找一次跟1~size()找一次
// 然後在這兩個dp取max

class Solution {
public:
    
    int rob(vector<int>& nums, int left, int right){
        
        if(right - left <= 1) return nums[left];
        
        vector<int> dp(right, 0);
        
        // lower bound
        dp[left] = nums[left];
        dp[left + 1] = max(nums[left], nums[left + 1]); 
        
        for(int i = left + 2; i < right; i++)
            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
        
        return dp[right - 1];
        
    }
    
    int rob(vector<int>& nums) {
        
        if(nums.size() <= 1) return (nums.empty()) ? 0 : nums[0];
        
        return max(rob(nums, 0, nums.size() - 1), rob(nums, 1, nums.size()));
        
    }
};
