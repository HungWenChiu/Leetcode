// 遇到要找字典找字串的東西都可以使用Trie

class Node{
public:
    Node *child[26] = {nullptr};
    bool is_word = false;       
};

class WordDictionary {
private:
    Node* root;
public:
    /** Initialize your data structure here. */
    WordDictionary() {
        
        root = new Node();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        
        Node* curptr = root;
        for(int i = 0; i < word.size(); i++)
        {
            if(curptr->child[word[i] - 'a'] == nullptr)
                curptr->child[word[i] - 'a'] = new Node();
            
            curptr = curptr->child[word[i] - 'a'];
        }
        curptr->is_word = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return match(word, root, 0);
    }
    
    bool match(string& word, Node* node, int idx){
        
        if(node == nullptr) return false;
        
        if(idx == word.size())
            return node->is_word;
        
        if(word[idx] != '.')
            return match(word, node->child[word[idx] - 'a'], idx+1);
        else
        {
            for(int i = 0; i < 26; i++)
            {
                if(match(word, node->child[i], idx+1))
                    return true;
            }
                
        }
        return false;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
