// 用recursive去找，且找每個點的時候要給定所有parent nodes的[min, max]
// 因為每個左邊的點一定要<所有他的parent nodes
// 每個右邊的點一定要>所有他的parent nodes
// 所以每次找left的時候要把max要下修成自己的值
// 每次找right的時候要把min上修成自己的值

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool is_valid(TreeNode* node, long long min_num, long long max_num){
        
        if(node == nullptr)
            return true;
        
        if(node->val <= min_num || node->val >= max_num)
            return false;
        
        bool res = is_valid(node->left, min_num, node->val) && is_valid(node->right, node->val, max_num);
        return res;
    }
    
    bool isValidBST(TreeNode* root) {
        
        return is_valid(root, LONG_MIN, LONG_MAX);
        
    }
};
