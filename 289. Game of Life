// In-place : 使用FSM的方式:
// 0 : 0->0  
// 1 : 1->1 符合題目rule 2
// 2 : 1->0 符合題目rule 1/3
// 3 : 0->1 符合題目rule 4
// 得到所有%2 = 0 最後都是死(0)
//     所有%2 = 1 都是變成活(1)


class Solution {
public:
    
    int get_live(vector<vector<int>>& board, int x, int y){
        
        int total = 0;
        
        if(x - 1 >= 0) total += (board[x - 1][y] == 1 || board[x - 1][y] == 2) ? 1 : 0;
        if(y - 1 >= 0) total += (board[x][y - 1] == 1 || board[x][y - 1] == 2) ? 1 : 0;
        if(x - 1 >= 0 && y - 1 >= 0) total += (board[x - 1][y - 1] == 1 || board[x - 1][y - 1] == 2) ? 1 : 0;
        if(x + 1 < board.size()) total += (board[x + 1][y] == 1 || board[x + 1][y] == 2) ? 1 : 0;
        if(y + 1 < board[0].size()) total += (board[x][y + 1] == 1 || board[x][y + 1] == 2) ? 1 : 0;
        if(x + 1 < board.size() && y + 1 < board[0].size()) total += (board[x + 1][y + 1] == 1 || board[x + 1][y + 1] == 2) ? 1 : 0;
        if(x - 1 >= 0 && y + 1 < board[0].size()) total += (board[x - 1][y + 1] == 1 || board[x - 1][y + 1] == 2) ? 1 : 0;
        if(x + 1 < board.size() && y - 1 >= 0) total += (board[x + 1][y - 1] == 1 || board[x + 1][y - 1] == 2) ? 1 : 0;
        
        return total;
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        
        for(int i = 0; i < board.size(); i++)
            for(int j = 0; j < board[0].size(); j++)
            {
                if(board[i][j] == 0 && get_live(board, i, j) == 3)
                    board[i][j] = 3;
                else if(board[i][j] == 1)
                {
                    int tmp = get_live(board, i, j);
                    if( tmp < 2 || tmp > 3)
                        board[i][j] = 2;
                }
            }
        
        for(int i = 0; i < board.size(); i++) // 最後直接%2 轉成下一階段的board
            for(int j = 0; j < board[0].size(); j++)
                board[i][j] %= 2; 
        
        
    }
};
