// live < 2 live == > dies
//      2~3 lives to next generation
//      > 3 ==> dies
 
//  die w/3 lives ==> live cell

class Solution {
public:
    
    int get_live(vector<vector<int>>& board, int x, int y){
        
        int total = 0;
        
        if(x - 1 >= 0) total += board[x - 1][y];
        if(y - 1 >= 0) total += board[x][y - 1];
        if(x - 1 >= 0 && y - 1 >= 0) total += board[x - 1][y - 1];
        if(x + 1 < board.size()) total += board[x + 1][y];
        if(y + 1 < board[0].size()) total += board[x][y + 1];
        if(x + 1 < board.size() && y + 1 < board[0].size()) total += board[x + 1][y + 1];
        if(x - 1 >= 0 && y + 1 < board[0].size()) total += board[x - 1][y + 1];
        if(x + 1 < board.size() && y - 1 >= 0) total += board[x + 1][y - 1];
        
        return total;
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        
        set<pair<int, int>> changed;
        
        for(int i = 0; i < board.size(); i++)
            for(int j = 0; j < board[0].size(); j++)
            {
                if(board[i][j] == 0 && get_live(board, i, j) == 3)
                    changed.insert({i, j});
                else if(board[i][j] == 1)
                {
                    int tmp = get_live(board, i, j);
                    if( tmp < 2 || tmp > 3)
                        changed.insert({i, j});
                }
            }
        
        for(auto e : changed)
            board[e.first][e.second] = !board[e.first][e.second];
        
        
    }
};
