/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// use priority queue
// class Solution {
// public:
    
//     vector<int> closestKValues(TreeNode* root, double target, int k) {
        
//         priority_queue<pair<double, int>> pq;
//         queue<TreeNode*> q;
//         q.push(root);
//         vector<int> res;
        
//         while(!q.empty())
//         {
//             pq.push({(abs(q.front()->val - target)), q.front()->val});
            
//             if(pq.size() > k)
//                 pq.pop();
            
//             if(q.front()->left) q.push(q.front()->left);
//             if(q.front()->right) q.push(q.front()->right);
//             q.pop();
//         }
        
//         int n = pq.size();
//         for(int i = 0; i < n; i++)
//         {
//             pair<double, int> tmp = pq.top();
//             res.push_back(tmp.second);
//             pq.pop();
//         }    
        
//         return res;
//     }
// };


class Solution {
public:
    
    void getPredecessor(stack<TreeNode*>& pre){
        
        TreeNode* tmp = pre.top();
        pre.pop();
        if(tmp->left)
        {
            pre.push(tmp->left);
            while(pre.top()->right)
                pre.push(pre.top()->right);
        }
        
    }
    
    void getSuccessor(stack<TreeNode*>& suc){
        
        TreeNode* tmp = suc.top();
        suc.pop();
        if(tmp->right)
        {
            suc.push(tmp->right);
            while(suc.top()->left)
                suc.push(suc.top()->left); 
        }
    }
    
    vector<int> closestKValues(TreeNode* root, double target, int k) {
       
        stack<TreeNode*> pre; // pre的最上面為 <= targert小但最接近target的數字
        stack<TreeNode*> suc; // suc最上面為 > target但離target最接近的數字
        vector<int> res;
        
        
        while(root) // 先確保兩個stack都有放入各自最接近target的數字
        {
            if(root->val <= target)
            {
                // if(!pre.empty()) pre.pop();
                pre.push(root);
                root = root->right;
            }
            else
            {
                // if(!suc.empty()) suc.pop();
                suc.push(root);
                root = root->left;
            }
        }
        
        while(k-- > 0) // 比較k次
        {
            if(suc.empty() || !pre.empty() && target - pre.top()->val < suc.top()->val - target)
            {
                res.push_back(pre.top()->val);
                getPredecessor(pre);
                // pre.pop();
            }
            else
            {
                res.push_back(suc.top()->val);
                getSuccessor(suc);
                // suc.pop();
            }
        }
        
        return res;
    }
};
