/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void get_DFS(TreeNode* node, int sum, int& res){
        
        if(!node) return;
        
        if(node->val == sum) res++;
        if(node->left) get_DFS(node->left, sum - node->val, res);
        if(node->right) get_DFS(node->right, sum - node->val, res);        
    }
    
    int pathSum(TreeNode* root, int sum) {
        
        if(!root) return 0;
        
        int res = 0;
        queue<TreeNode*> q{{root}};
        
        while(!q.empty())
        {
            get_DFS(q.front(), sum, res);
            if(q.front()->left) q.push(q.front()->left);
            if(q.front()->right) q.push(q.front()->right);
            q.pop();
        }
        return res;
    }
};
