// // 觀念: 因為再boundary的'O'不能算，
// 所以一個很快的找法就是先找四周圍為'O'的位置然後DFS去找與他相連的位置，然後改成一個符號EX:'$'。
// 如此下來所有不能被改成'X'的'O'都已經被改成'$'，剩下的位置就是可以被改成'X'的位置!!!


class Solution {
public:
    
    void DFS(vector<vector<char>>& board, int x, int y){
        
        if(board[x][y] != 'O')
            return;
        
        board[x][y] = '$';
        
        if(x + 1 < board.size())
            DFS(board, x + 1, y);
        if(x - 1 >= 0)
            DFS(board, x - 1, y);
        if(y + 1 < board[0].size())
            DFS(board, x, y + 1);
        if(y - 1 >= 0)
            DFS(board, x, y - 1);
        
        return;
    }
    
    void solve(vector<vector<char>>& board) {
        
        if(board.size() == 0)
            return;
        
        for(int i = 0; i < board.size(); i++)
        {
            DFS(board, i, 0);
            DFS(board, i, board[0].size() - 1);
        }    
        
        for(int j = 0; j < board[0].size(); j++)
        {
            DFS(board, 0, j);
            DFS(board, board.size() - 1, j);
        }
        
        for(int i = 0; i < board.size(); i++)
        {
            for(int j = 0; j < board[0].size(); j++)
            {
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
                else if(board[i][j] == '$')
                    board[i][j] = 'O';
            }
        } 
        
        return;
    }
};
