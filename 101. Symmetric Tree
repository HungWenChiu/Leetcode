/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* getsymetric(TreeNode* node){
        
        if(node == nullptr || node->left == nullptr && node->right == nullptr)
            return node;
        
        TreeNode* tmp = getsymetric(node->left);
        node->left = getsymetric(node->right);
        node->right = tmp;
        
        return node;
    }
    
    bool same_tree(TreeNode* left, TreeNode* right){
        
        if(left == nullptr && right == nullptr)
            return true;
        
        if((left == nullptr && right != nullptr) || (left != nullptr && right == nullptr))
            return false;
        
        if(left->val != right->val)
            return false;
            
        return same_tree(left->left, right->left) && same_tree(left->right, right->right);
    }
        
    bool isSymmetric(TreeNode* root) {
        
        if(root == nullptr || (root->left == nullptr && root->right == nullptr))
            return true;
        
        getsymetric(root->right);
        return same_tree(root->left, root->right);
    }
};
