/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int get_deep_depth(TreeNode* node, int parent_num){
        
        if(!node || node->val != parent_num) return 0;
        return 1 + max(get_deep_depth(node->left, parent_num), get_deep_depth(node->right, parent_num));
      
    }
    int longestUnivaluePath(TreeNode* root) {
        
        if(!root) return 0;
        int max_res = 0;
        queue<TreeNode*> q{{root}};
        
        while(!q.empty())
        {
            int l_most = get_deep_depth(q.front()->left, q.front()->val);
            int r_most = get_deep_depth(q.front()->right, q.front()->val);
            
            max_res = max(max_res, l_most + r_most);
            if(q.front()->left) q.push(q.front()->left);
            if(q.front()->right) q.push(q.front()->right);
            q.pop();
        }
        
        return max_res;
    }
};
