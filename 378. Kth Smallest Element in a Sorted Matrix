// O(n^2)
// class Solution {
// public:
//     int kthSmallest(vector<vector<int>>& matrix, int k) {
        
//         priority_queue<int, vector<int>, greater<int>> pq;
        
//         for(int i = 0; i < matrix.size(); i++)
//             for(int j = 0; j < matrix[0].size(); j++)
//                 pq.push(matrix[i][j]);
        
//         for(int i = 0; i < k; i++)
//         {
//             if(i == k - 1) return pq.top();
//             pq.pop();
//         }
//         return 0;
//     }
// };

// O(nlogX) X == 最大最小的差值
// 此法也是使用二分法只是從左下角開始找mid，如果值 <= target 則跳到下一行，把這一行個數加起來，算下一行
// 如果 > target值，則往上移一位
// 最後res一定是第一個<= target的位置
class Solution {
public:
    
    int search_less_equal(vector<vector<int>>& matrix, int target){
        
        int n = matrix.size();
        int i = n - 1, j = 0; // 直接從最左下角開始找
        int res = 0;
        
        while(i >= 0 && j < n)
        {
            if(matrix[i][j] <= target)
            {
                res += i + 1; // 把上面到i的這一行數目都加起來
                j++; // 向右移一位
            }
            else
            {
                i--; // 往上移一位
            }
        }
        return res;
    }
    
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        
        int cnt = 0;
        int left = matrix[0][0];
        int right = matrix.back().back();
        
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            cnt = search_less_equal(matrix, mid);
            
            if(cnt < k) // 表示要在往後找
                left = mid + 1;
            else
                right = mid;
        }
        
        return left;
        
    }
};
