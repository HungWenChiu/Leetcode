/*
使用recursive & DFS & dp的方式來做

dp[node] = max(dp[node->left->left] + 
               dp[node->left->right] + 
               dp[node->right->left] + 
               dp[node->right->right] + 
               node->val, 
               dp[node->left] + 
               dp[node->eight]);

但如果每次都做recursive，就會找到重複的node，產生Time limited，
所以這時就要把每個node的最大profix存到hash table裡面
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int DFS(TreeNode* node, unordered_map<TreeNode*, int>& m){
        
        if(node == nullptr)
            return 0;
        
        if(m.count(node) > 0)
            return m[node];
        
        int profix = 0;
        
        if(node->left != nullptr)
        {
            profix += DFS(node->left->left, m);
            profix += DFS(node->left->right, m);
        }
        
        if(node->right != nullptr)
        {
            profix += DFS(node->right->left, m);
            profix += DFS(node->right->right, m);
        }
        
        m[node] = max(node->val + profix, DFS(node->left, m) + DFS(node->right, m));
        return m[node];
    }
    
    int rob(TreeNode* root) {
        
        unordered_map<TreeNode*, int> m; 
        return DFS(root, m);
    }
};

// dp[node] = max(dp[node->left] + dp[node->right], dp[node->left->left] + dp[node->left->right] + dp[node->right->left] + dp[node->right->right] + node->val)
