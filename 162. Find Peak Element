// 因為要O(logN) ==>  所以要馬上想到"binary search
// 1.第一次找中間的數看看有沒有題目所求，有就return
// 2.沒有的話就在往mid的左右兩個部分做recursive

// class Solution{
// public:
    
//     void get_peak(vector<int>& nums, int left, int right, int& idx){
        
//         if(left > right) return;
        
//         int mid = (left + right) / 2;
//         if(mid == 0 || mid == nums.size() - 1)
//         {
//             if(mid == 0 && (nums[mid] > nums[mid + 1])) 
//             {
//                 idx = mid;
//                 return;
//             }
//             else if((mid == nums.size() - 1) && nums[mid - 1] < nums[mid])
//             {
//                 idx = mid;
//                 return;
//             }
//         }
//         else if(nums[mid - 1] < nums[mid] && nums[mid] > nums[mid + 1])
//         {
//             idx = mid;
//             return;
//         }
//         get_peak(nums, mid + 1, right, idx);
//         get_peak(nums, left, mid - 1, idx);
//     }
    
//     int findPeakElement(vector<int>& nums) {
        
//         if(nums.size() == 1)
//             return 0;
        
//         int idx = 0;
//         get_peak(nums, 0, nums.size() - 1, idx);
//         return idx;
        
//     }
// };

// 簡化版
class Solution{
public:
    
    int findPeakElement(vector<int>& nums) {
        
        if(nums.size() == 1)
            return 0;
        
        int left = 0, right = nums.size() - 1;
        
        while(left < right)
        {
            int mid = (left + right) / 2;
            if(nums[mid] < nums[mid + 1]) left = mid + 1;
            else right = mid;
        }
        
        return right;
        
    }
};
