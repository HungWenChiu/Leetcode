// use BFS Algorithm and queue


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void BFS_find(vector<vector<int>> &res, queue<TreeNode*> &q){
        
        vector<int> tmp;
        queue<TreeNode*> sub_q;
        
        if(q.front() == nullptr) // 如果pointer 是空值return
            return;
        
        while(!q.empty()) // 把同個level的 node->val存到vector tmp
        {
            tmp.push_back(q.front()->val);
            
            if(q.front()->left != nullptr) // 如果有左右節點，放到sub_queue裡面
                sub_q.push(q.front()->left);
            if(q.front()->right != nullptr)    
                sub_q.push(q.front()->right);
            q.pop(); // pop parent node
        }
        
        if(!tmp.empty()) // 把串好的vector push 到array裡面
        {
            res.push_back(tmp);
            BFS_find(res, sub_q); // 找下一level
        }
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        vector<vector<int>> res = {}; // initial null vector，以防有空的tree case
        queue<TreeNode*> q; // q 用來存每個level的node
        q.push(root); // 剛開始把root放進去
        
        BFS_find(res, q);
        
        return res;
    }
};
