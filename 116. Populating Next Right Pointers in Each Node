/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

// recursive 寫法
// class Solution {
// public:
//     Node* connect(Node* root) {
        
//         if(root == nullptr) return nullptr;
//         if(root->left != nullptr) root->left->next = root->right;
//         if(root->right != nullptr) root->right->next = (root->next) ? root->next->left : nullptr;
//         connect(root->left);
//         connect(root->right);
        
//         return root;
        
//     }
// };


// queue + iteration 的寫法
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        
        if(!root) return nullptr;
        queue<Node*> q{{root}};
        
        while(!q.empty())
        {
            int n = q.size();
            for(int i = 0; i < n; i++)
            {
                Node* t = q.front();
                q.pop();
            
                if(i == n - 1) 
                    t->next = nullptr; // the last one needs to point to NULL
                else
                    t->next = q.front(); // only the No.0 to No.n - 2 nodes need to point to the next sibling
                
                if(t->left) q.push(t->left); // push its children
                if(t->right) q.push(t->right);
            }
        }
        
        return root;
    }
};

