/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

// recursive 寫法
// class Solution {
// public:
//     Node* connect(Node* root) {
        
//         if(root == nullptr) return nullptr;
//         if(root->left != nullptr) root->left->next = root->right;
//         if(root->right != nullptr) root->right->next = (root->next) ? root->next->left : nullptr;
//         connect(root->left);
//         connect(root->right);
        
//         return root;
        
//     }
// };


// iterative 寫法
class Solution {
public:
    Node* connect(Node* root) {
        
        if(root == nullptr) return nullptr;
        
        Node* curptr = root; // curptr 為目前指到的node
        root->next = nullptr;
        Node* head = root; // 指向每一層的第一個node
        
        while(curptr != nullptr)
        {
            if(curptr->left) curptr->left->next = curptr->right;
            if(curptr->right) curptr->right->next = (curptr->next) ? curptr->next->left : nullptr;
            if(curptr->next) curptr = curptr->next; // 如果next不是nullptr，就往同層的下一個node指
            else // 如果是nullptr，則指到head->left 下一層
            {
                curptr = head->left;
                head = head->left; // head指到下一層的最左邊
            }
        }
        
        return root;
        
    }
};
