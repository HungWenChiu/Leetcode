/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// postorder: 左->右->中
// recursive
// class Solution {
// public:
    
//     void get_post(TreeNode* node, vector<int>& res){
        
//         if(node == nullptr) return;
//         get_post(node->left, res);
//         get_post(node->right, res);
//         res.push_back(node->val);
//     }
    
//     vector<int> postorderTraversal(TreeNode* root) {
        
//         vector<int> res;
//         get_post(root, res);
        
//         return res;
        
//     }
// };

// iterative
class Solution {
public:
    
    vector<int> postorderTraversal(TreeNode* root) {
        
        if(!root) return {};
        
        vector<int> res;
        stack<TreeNode*> s;
        s.push(root);
        
        while(!s.empty())
        {
            TreeNode* node = s.top();
            s.pop();
            res.insert(res.begin(), node->val);
            if(node->left) s.push(node->left);
            if(node->right) s.push(node->right);
        }
        
        return res;
        
    }
};
