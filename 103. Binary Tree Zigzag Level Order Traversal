/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// 直接用最基本的queue travel tree 法
// 然後根據level的奇偶數來決定sequence要不要reverse
// class Solution {
// public:
//     vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    
//         if(root == nullptr)
//             return {};
        
//         vector<vector<int>> res;
//         queue<TreeNode*> q;
//         q.push(root);
//         int level = 0;
        
//         while(!q.empty())
//         {
//             int len = q.size();
//             vector<int> seq;
//             for(int i = 0; i < len; i++)
//             {
//                 TreeNode* tmp = q.front();
//                 q.pop();
//                 seq.push_back(tmp->val);
//                 if(tmp->left) q.push(tmp->left);
//                 if(tmp->right) q.push(tmp->right);
//             }
//             if(level++ % 2 == 1)
//                 reverse(seq.begin(), seq.end());
//             res.push_back(seq);
//         }
        
//         return res;
        
//     }
// };


// 寫法2: 跟寫法1的方式一樣，但不把最後的seq reverse掉，
而是直接把數值反著塞進vector，如果是遇到需要翻轉的level的時候
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    
        if(root == nullptr)
            return {};
        
        vector<vector<int>> res;
        queue<TreeNode*> q;
        q.push(root);
        int level = 0;
        
        while(!q.empty())
        {
            int len = q.size();
            vector<int> seq(len); // 直接給定size
            for(int i = 0; i < len; i++)
            {
                TreeNode* tmp = q.front();
                q.pop();
                
                // 需要反向塞則把第一個塞到最後一個，第二個塞到倒數第一 ==> 第i個塞到len - 1 - i
                if(level % 2 == 1)
                    seq[len - 1 - i] = tmp->val;
                else // 正常的塞法
                    seq[i] = tmp->val;
                
                if(tmp->left) q.push(tmp->left);
                if(tmp->right) q.push(tmp->right);
            }
            res.push_back(seq);
            level++;
        }
        
        return res;
        
    }
};
