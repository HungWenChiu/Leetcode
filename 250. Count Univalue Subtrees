/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//DFS + recursive
class Solution {
public:
    
    bool get_DFS(TreeNode* node, int& res){
        
        if(!node) return true;
        
        bool left = get_DFS(node->left, res); // 找左邊subtree是不是true
        bool right = get_DFS(node->right, res); // 找右邊subtree是不是true
        
        // 即使左右邊subtree是true但也是要左右邊subtree的root跟現在他的parent比較有沒有一樣，
        // 如果不一樣表示現在這個parent當作root所形成的subtree不是Univalue Subtrees。
        if(node->left && node->val != node->left->val) left = false; 
        if(node->right && node->val != node->right->val) right = false;
        
        // 確認左右subtree皆Univalue Subtrees且跟現在的parent value一樣，形成新的Univalue Subtrees，so res++
        if(left && right) res++; 
        
        return left && right;
        
    }
    
    int countUnivalSubtrees(TreeNode* root) {
        
        if(!root) return 0;
        
        int res = 0;
        get_DFS(root, res);
        return res;
    }
};
