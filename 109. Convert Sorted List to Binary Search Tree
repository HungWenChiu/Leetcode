/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// list無法很快得找出中間數，所以使用快慢指標的概念來找中間數，再用recirsive左右分別進行
class Solution {
public:
    
    TreeNode* ToBST(ListNode* head, ListNode*tail)
    {
        if(head == tail)
            return nullptr;
        
        ListNode *slow = head; // slow pointer
        ListNode *fast = head; // fast pointer
        
        while(fast != tail && fast->next != tail) // find the median element
        {
            slow = slow->next;
            fast = fast->next->next;   
        }
        
        TreeNode* root = new TreeNode(slow->val);
        root->left = ToBST(head, slow);
        root->right = ToBST(slow->next, tail);
        
        return root;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        
        if(head == nullptr)
            return nullptr;
        else
            return ToBST(head, nullptr);
        
    }
};
