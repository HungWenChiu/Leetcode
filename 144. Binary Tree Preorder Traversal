/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// preorder: 中->左->右
// inorder: 左->中->右
// postorder: 左->右->中
// recursive 寫法
// class Solution {
// public:
//     void preorder(TreeNode* node, vector<int>& res){
        
//         if(node == nullptr) return;
        
//         res.push_back(node->val);
//         preorder(node->left, res);
//         preorder(node->right, res);
        
//     }
    
//     vector<int> preorderTraversal(TreeNode* root) {
       
//         vector<int> res;
//          preorder(root, res);
        
//         return res;
//     }
// };

//iterative 寫法
// BFS用queue，DFS用stack
class Solution {
public:
    
    vector<int> preorderTraversal(TreeNode* root) {
       
        if(root == nullptr) return {};
        vector<int> res;
        stack<TreeNode*> s;
        s.push(root);
        
        while(!s.empty())
        {
            TreeNode* node = s.top();
            s.pop();
            res.push_back(node->val);
            if(node->right) s.push(node->right);
            if(node->left) s.push(node->left);
            
        }
        
        return res;
    }
};
