/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* buildTree(vector<int>& inorder, int ileft, int iright, vector<int>& postorder, int pleft, int pright){
        
        if(ileft > iright || pleft > pright) return nullptr;
        
        int i;
        for(i = ileft; i <= iright; i++)
            if(postorder[pright] == inorder[i]) break;
        
        TreeNode* node = new TreeNode(postorder[pright]);
        node->right = buildTree(inorder, i + 1, iright, postorder, pright - (iright - i) , pright - 1);
        node->left = buildTree(inorder, ileft, i - 1, postorder, pleft, pright - (iright - i) - 1);
        
        return node;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        TreeNode* tree = buildTree(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1);
        return tree;
    }
};
