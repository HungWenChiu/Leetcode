class Solution {
public:
    
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        
        vector<double> res;
        multiset<long long> small, large;
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(i >= k)
            {
                // 移除舊的element
                if(small.count(nums[i - k])) small.erase(small.find(nums[i - k])); 
                else if(large.count(nums[i - k])) large.erase(large.find(nums[i - k]));
            }
                
            // 加入新的element
            if(small.size() <= large.size())
            {
                if(large.empty() || nums[i] <= *large.begin()) small.insert(nums[i]);
                else
                {
                    small.insert(*large.begin());
                    large.erase(large.begin());
                    large.insert(nums[i]);
                }
            }
            else
            {
                if(nums[i] >= *small.rbegin()) large.insert(nums[i]);
                else
                {
                    large.insert(*small.rbegin());
                    small.erase(--small.end());
                    small.insert(nums[i]);
                }
            }
            
            if(i >= (k - 1))
            {
                if(k % 2 > 0) 
                    res.push_back(*small.rbegin());
                else
                    res.push_back((double)(*small.rbegin() + *large.begin()) / 2);
            }
            
        }
        
        return res;
    }
};
