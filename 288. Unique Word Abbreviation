class ValidWordAbbr {
public:
    ValidWordAbbr(vector<string>& dictionary) {
        
        for(int i = 0; i < dictionary.size(); i++)
        {
            string t = dictionary[i];
            t = (t.size() > 2) ? t[0] + to_string(t.size() - 2) + t[t.size() - 1] : t;
            
            this->dict_m[t].push_back(dictionary[i]);
        }
        
    }
    
    bool isUnique(string word) {
        
        string t = (word.size() > 2) ? word[0] + to_string(word.size() - 2) + word[word.size() - 1] : word;
        if(!this->dict_m.count(t)) return true; // rule 1.
        
        if(this->dict_m.count(t)) // rule 2.
        {
            for(int i = 0; i < this->dict_m[t].size(); i++)
                if(this->dict_m[t][i] != word) return false;
            return true;
        }
        return false;
    }
    
private:
    unordered_map<string, vector<string>> dict_m; // 1st string is abbr, the 2nd one is the whole word
};

/**
 * Your ValidWordAbbr object will be instantiated and called as such:
 * ValidWordAbbr* obj = new ValidWordAbbr(dictionary);
 * bool param_1 = obj->isUnique(word);
 */
