/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* flatt_child(TreeNode* node) {
        
        if(node == nullptr)
            return nullptr;
        
        TreeNode* left_node = flatt_child(node->left);
        TreeNode* right_node = flatt_child(node->right);
        
        if(left_node != nullptr) // 表示左邊有subtree，才需要另外做處理
        {
            node->right = left_node;
    
            while(left_node->right != nullptr) // 要找到右邊subtree的最底層
                left_node = left_node->right;
            
            left_node->right = right_node; // 最底層連到原本右邊的subtree
            node->left = nullptr;
        }
        
        return node;
        
    }
    
    void flatten(TreeNode* root) {
        
        flatt_child(root);
    }
};
