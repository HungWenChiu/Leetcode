class MyQueue {
private:
    stack<int> s1, s2; // s1倒序進入(舊的在最上面)，s2正序進入(新的在最上面)
    
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    void shift_s(stack<int>& s1, stack<int>& s2){
        
        if(!s1.empty()) return;
        
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s2.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        
        shift_s(s1, s2);
        int tmp = s1.top();
        s1.pop();
        return tmp;
    }
    
    /** Get the front element. */
    int peek() {
        
        shift_s(s1, s2);
        return s1.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        
        return s1.empty() && s2.empty();
        
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
