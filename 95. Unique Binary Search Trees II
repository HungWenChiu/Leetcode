// 使用Devide and conquer
// recursive 對每個數字i做: 分成=> [start, i -1] & [i + 1, end] 兩部分在去建構tree
// boundary是start > end => return nullptr

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) return {};
        return get_sub_tree(1, n);
    }
    
    vector<TreeNode*> get_sub_tree(int start, int end){
        
        if(start > end) return {nullptr};
        
        vector<TreeNode*> res;
        
        for(int i = start; i <= end; i++)
        {
            auto lefts = get_sub_tree(start, i - 1); // 分成contruct 左子樹
            auto rights = get_sub_tree(i + 1, end); // 分成construct 右子樹
            for(auto l : lefts) // 左右子樹會回傳一個所有可能建構出來的子樹的array
            {
                for(auto r : rights)
                {
                    TreeNode* tmp = new TreeNode(i); 
                    tmp->left = l;
                    tmp->right = r;
                    res.push_back(tmp); // 每一種產生出來的可能都要放到新的array
                }
            
            }
                
        }
        return res; // 把產生出來子樹的array return
        
    }
    
};
