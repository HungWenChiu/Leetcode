// 2-pass algorithm
// class Solution {
// public:
//     void sortColors(vector<int>& nums) {
        
//         vector<int> color(3, 0);
//         int idx = 0;
        
//         for(auto num : nums)
//             color[num]++;
//         for(int i = 0; i < nums.size(); i++)
//         {
//             while(color[idx] == 0) idx++;
//             nums[i] = idx;
//             color[idx]--;
//         }
        
//     }
// };


// 1 - pass algorithm - 2 pointors
class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        int red = 0, blue = nums.size() - 1;
        
        for(int i = 0; i <= blue; i++)
        {
            if(nums[i] == 0)
                swap(nums[i], nums[red++]);
            else if(nums[i] == 2)
                swap(nums[i--], nums[blue--]);
        }
        
    }
};
