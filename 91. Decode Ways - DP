// Dynamic Programing
// 1. 找出規律為: c[i] = c[i -1] + c[i - 2]
//    c[i-1] 為前面i-1個字母的case，則在這些case 多加一組s[i]的字母，所以會有c[i-1]個case
//    EX: 6加到22字母後有-> 2 2 6, 22 6 兩種 
//    c[i-1] 為前面i-2個字母的case + c[i-1]c[i] 為一組在後面:
//    EX: 226 -> 2 26 這一組
// 2.另外需判斷兩種case:
//   第一種: s[i] = '0'的情形，因為0不代表任何字母所以不能單獨排到其他字母後面所以沒有c[i-1]的case
//   第二種: s[i-1] * 10 + s[i] 要介於1~26之間，這樣才可以排到c[i-2] case的後面，才能有c[i-2]個case
// 另外因為c[i] = c[i -1] + c[i - 2] 的關係所以需要把case的index 往前移一個，變成開頭為1開始算
// 且default: c[0] = 1, c[1] = 1


class Solution {
public:
    
    int numDecodings(string s) {
        
        vector<int> cases(s.size() + 1, 0);
        cases[0] = 1;
        cases[1] = 1;
        
        if(s[0] == '0')
            return 0;
        
        for(auto i = 1; i < s.size(); i++)
        {
            if(s[i] != '0')
                cases[i+1] = cases[i];
            
            int tmp = (s[i - 1] - '0') * 10 + (s[i] - '0');
            if(tmp >= 1 && tmp <= 26 && s[i - 1] != '0')
                cases[i+1] += cases[i-1];
        }
        
        return cases[s.size()];
       
        
        
        
    }
};
