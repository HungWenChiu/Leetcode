// 使用dp time complexity = O(n^2)
// 概念: 計算出每個index的累加
// 而多加一個初始值sum[0] = 0
// sum[] = {0, 4, 9, 9, 7, 4, 5}
// 如此一來 sum[1] - sum[0] = [4]
//          sum[2] - sum[1] = [5]    的和
//          sum[2] - sum[0] = [4,5]  的和
//          sum[3] - sum[2] = [0]   的和
//          sum[3] - sum[1] = [0, 5] 的和
//          sum[3] - sum[0] = [4,5,0] 的和

// dp[i] = dp[j] + 1  if (sum[i] - sum[j]) % K


// class Solution {
// public:
    
//     int subarraysDivByK(vector<int>& A, int K) {
                
//         vector<int> sum = {0}; // 算出每個數字的壘加
//         vector<int> dp(A.size() + 1, 0);
//         int res = 0;
        
//         for(auto e : A)
//             sum.push_back(sum.back() + e);
        
//         for(int i = 1; i < sum.size(); i++)
//             for(int j = i - 1; j >= 0; j--)
//             {
//                 if((sum[i] - sum[j]) % K == 0)
//                 {
//                     dp[i] = dp[j] + 1;
//                     res += dp[i];
//                     break;
//                 }
//             }
        
//         return res;
//     }
// };


// 0, 4, 9, 9, 7, 4, 5
// [4]                                                              dp[1] = 0
// [4, 5] [5]                                                       dp[2] = 1
// [4,5,0] [5,0] [0]                                                dp[3]
// [4,5,0,-2] [5,0,-2] [0, -2][-2]
// [4,5,0,-2,-3] [5,0,-2,-3] [0, -2,-3][-2,-3][-3]
// [4,5,0,-2,-3,1] [5,0,-2,-3,1] [0, -2,-3,1][-2,-3,1][-3,1][1]
//============================================================================================

// 改良O(n) ==> 原理就是我們不需要一個一個減，只需要知道每個sum % K 的餘數即可
// sum = {4, 9, 9, 7, 4, 5} => rmd = {4, 4, 4, 2, 4, 0}
// 利用sum[i] = aK + i   sum[j] = bK + j
// 如果 i == j  則表示sum[i] - sum[j] % k = 0  => 表示這個數組是devisible by K
// 這寫法實在是太屌啦~~~~
class Solution {
public:
    
    int subarraysDivByK(vector<int>& A, int K) {
                
        int sum = 0; // 算出每個數字的壘加
        unordered_map<int, int> m;
        int res = 0;
        
        m[0]++; // 餘數等於0的一定要是1 => 因為有可能sum[i] % K == 0
        for(auto e : A)
        {
            sum += e;
            int mod = ((sum % K) + K) % K;
            
            if(m[mod] > 0) // 表示有數組的sum % K == mod，所以目前的sum[i] - sum[j] 就會是一個數組 % K == 0
                res += m[mod]; // 有多少個 % K 餘數跟現在這個數字相同
            m[((sum % K) + K) % K]++; // + K是因為sum有可能是負數，所以要轉正
        }
        
        return res;
    }
};
