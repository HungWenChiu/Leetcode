/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void get_DFS(TreeNode* node, vector<int>& tmp, vector<string>& res){
        
        if(!node) return;
    
        tmp.push_back(node->val);
        if(!node->left && !node->right)
        {
            string str = to_string(tmp[0]);
            for(int i = 1; i < tmp.size(); i++)
                str += "->" + to_string(tmp[i]);
            res.push_back(str);
        }
        else
        {
            if(node->left) get_DFS(node->left, tmp, res);
            if(node->right) get_DFS(node->right, tmp, res);
        }
        tmp.pop_back();
        
        return;
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        
        if(!root) return {};
        
        vector<string> res;
        vector<int> tmp;
        get_DFS(root, tmp, res);
        
        return res;
    }
};
